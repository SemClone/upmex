name: Content Moderation

on:
  pull_request:
    types: [opened, edited, synchronize]
  issues:
    types: [opened, edited]
  pull_request_review_comment:
    types: [created, edited]

permissions:
  contents: read

jobs:
  check-content:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for commit checks

      - name: Check for banned words configuration
        id: check-config
        run: |
          if [ -f .github/banned-words.txt ]; then
            echo "config_exists=true" >> $GITHUB_OUTPUT
          else
            echo "config_exists=false" >> $GITHUB_OUTPUT
            echo "No banned-words.txt file found, skipping content moderation"
          fi

      - name: Check for banned words in PR
        if: github.event_name == 'pull_request' && steps.check-config.outputs.config_exists == 'true'
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
        run: |
          echo "Checking PR content for banned words..."

          # Create a file with PR content to check
          cat > /tmp/pr_content.txt << 'EOF'
          $PR_TITLE
          $PR_BODY
          EOF

          # Check for banned words
          found_banned=0
          while IFS= read -r word; do
            # Skip empty lines and comments
            if [[ -z "$word" ]] || [[ "$word" =~ ^# ]]; then
              continue
            fi

            # Check if word appears in PR content (case-insensitive)
            if grep -qi "$word" /tmp/pr_content.txt; then
              echo "::error::Banned word detected in PR content: [hidden]"
              found_banned=1
            fi
          done < .github/banned-words.txt

          # Check commit messages
          echo "Checking commit messages..."
          if [ -n "$BASE_SHA" ]; then
            git log --format=%B "${BASE_SHA}"..HEAD > /tmp/commits.txt

            while IFS= read -r word; do
              if [[ -z "$word" ]] || [[ "$word" =~ ^# ]]; then
                continue
              fi

              if grep -qi "$word" /tmp/commits.txt; then
                echo "::error::Banned word detected in commit messages: [hidden]"
                found_banned=1
              fi
            done < .github/banned-words.txt
          fi

          if [ $found_banned -eq 1 ]; then
            echo "❌ Content moderation check failed: banned words detected"
            echo "Please review and update your PR content and commit messages."
            exit 1
          else
            echo "✅ Content moderation check passed"
          fi

      - name: Check for banned words in Issue
        if: github.event_name == 'issues' && steps.check-config.outputs.config_exists == 'true'
        env:
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          echo "Checking issue content for banned words..."

          # Create a file with issue content
          cat > /tmp/issue_content.txt << 'EOF'
          $ISSUE_TITLE
          $ISSUE_BODY
          EOF

          found_banned=0
          while IFS= read -r word; do
            if [[ -z "$word" ]] || [[ "$word" =~ ^# ]]; then
              continue
            fi

            if grep -qi "$word" /tmp/issue_content.txt; then
              echo "::error::Banned word detected in issue: [hidden]"
              found_banned=1
            fi
          done < .github/banned-words.txt

          if [ $found_banned -eq 1 ]; then
            echo "❌ Content moderation check failed: banned words detected"
            exit 1
          else
            echo "✅ Content moderation check passed"
          fi

      - name: Check for banned words in Review Comments
        if: github.event_name == 'pull_request_review_comment' && steps.check-config.outputs.config_exists == 'true'
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          echo "Checking review comment for banned words..."

          cat > /tmp/comment_content.txt << 'EOF'
          $COMMENT_BODY
          EOF

          found_banned=0
          while IFS= read -r word; do
            if [[ -z "$word" ]] || [[ "$word" =~ ^# ]]; then
              continue
            fi

            if grep -qi "$word" /tmp/comment_content.txt; then
              echo "::error::Banned word detected in review comment: [hidden]"
              found_banned=1
            fi
          done < .github/banned-words.txt

          if [ $found_banned -eq 1 ]; then
            echo "❌ Content moderation check failed: banned words detected"
            exit 1
          else
            echo "✅ Content moderation check passed"
          fi